blueprint:
  name: Control PV Limit to avoid exporting to the grid
  description: "# Zero Feed In Automation

    **Version: 0.0.5**

    # Summary This automation will react on changes of energy imported or exported
    from the grid. It will control the Photovoltaic power generation by setting the
    limit to a value avoiding exporting to the grid

    ## Required sensors / entities

    <u>GridPowerMeters:</u>
    Sensors measuring Grid import or export e.g. all 3 phases
    in W. All power meters will be summed up to define the total grid import or export.

    <u>PVPowerMeters:</u>
    Sensors measuring PV Generation in W If sevaral Sensors
    are selected, those will be summed up.

    <u>NonPersistantLimit:</u>
    Entity to set the non persistant absolut limit in W.
    It should be the non persistant limit to avoid too many writes towards the flash
    memory.

    <u>InverterOnlineStatus:</u>
    Entity indicating if the inverter is available ('On' -> available)


    Kudos for the simple algorithm and idea go to: https://selbstbau-pv.de/wissensbasis/nulleinspeisung-hoymiles-hm-1500-mit-opendtu-python-steuerung/

    # Change log Check the github repository: https://github.com/AndreBott83/HA_Zero_PV_Grid_Feed_in

    "
  domain: automation
  input:
    TriggerInterval:
      name: Interval trigger
      description:
        Interval of which the automation will be triggered and a limit
        could be set in seconds
      default: 15
      selector:
        number:
          min: 5.0
          max: 120.0
          unit_of_measurement: s
          step: 5.0
          mode: slider
    MaxInverterPower:
      name: Inverter upper limit
      description: Define the maximum power the inverter can deliver in W
      default: 1600
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    MinInverterPower:
      name: Inverter lower limit
      description: Define the minimum power the inverter should deliver in W
      default: 600
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    AllowedFeedIn:
      name: Number in W of grid feed that is accepted
      description:
        Limitation of PV Generation will only be active if Number in W
        of grid feed that is higher than this number
      default: 0
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    GridMaxPoint:
      name: Grid max point
      description: Sets the Limit to UpperLimit as soon as this point is reached. Set to zero to Disable.
      default: 0
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: W
          mode: box
          step: 1.0
    ModeSelector:
      name: Select Controll ModeSelector
      description:
        "Mode 1: smooth decrease of allowed generation. Mode 2: Hard Cut
        to zero feed in"
      default: 1
      selector:
        number:
          min: 1.0
          max: 2.0
          step: 1.0
          mode: slider
    GridPowerMeters:
      name: Sensors measuring Grid import or export e.g. all 3 phases in W
      description:
        All power meters will be summed up to define the total grid import
        or export. Choose e.g. all 3 sensors measuring L1, L2 & L3 in W
      selector:
        entity:
          device_class:
            - power
          multiple: true
    PVPowerMeters:
      name: Sensors measuring PV Generation in W
      description: Choose the sensor showing the current produced PV Power
      selector:
        entity:
          device_class:
            - power
          multiple: true
    PVChannel1PowerMeter:
      name: Sensors measuring PV Generation for Channel 1 in W
      description: Choose the sensors showing the current produced PV Power for channel 1
      default: 0
      selector:
        entity:
          device_class:
            - power
    PVChannel2PowerMeter:
      name: Sensors measuring PV Generation for Channel 2 in W
      description: Choose the sensors showing the current produced PV Power for channel 2
      default: 0
      selector:
        entity:
          device_class:
            - power
    NonPersistantLimit:
      name: Entity to set the non persistant absolut limit in W
      description: Choose the entity to define the limit of PV generation in W
      selector:
        entity: {}
    InverterOnlineStatus:
      name: Entity that shows if the inverter is online
      description: Choose the entity showing the inverters is reachable
      selector:
        entity: {}
  source_url: https://github.com/AndreBott83/HA_Zero_PV_Grid_Feed_in/blob/master/HA_BluePrint_ZeroFeedIn.yaml
variables:
  triggerinterval: !input TriggerInterval
  lowerlimit: !input MinInverterPower
  upperlimit: !input MaxInverterPower
  gridmaxpoint: !input GridMaxPoint
  currentlimit: !input NonPersistantLimit
  PVPowerMetersvar: !input PVPowerMeters
  PVChannel1PowerMetersvar: !input PVChannel1PowerMeter
  PVChannel2PowerMetersvar: !input PVChannel2PowerMeter
  GridPowerMetersvar: !input GridPowerMeters
  ctlr_mode: !input ModeSelector
  pvgeneration:
    "{% set pvgeneration = expand(PVPowerMetersvar) | map(attribute='state')
    |map('float',default=0) | sum %} {{pvgeneration}}"
  pvchannel1generation:
    "{% set pvchannel1generation = expand(PVChannel1PowerMetersvar) | map(attribute='state')
    |map('float',default=0) | sum %} {{pvchannel1generation}}"
  pvchannel2generation:
    "{% set pvchannel2generation = expand(PVChannel2PowerMetersvar) | map(attribute='state')
    |map('float',default=0) | sum %} {{pvchannel2generation}}"
  gridsum:
    "{% set gridconsumption = expand(GridPowerMetersvar) | map(attribute='state')
    |map('float',default=0) | sum %} {{gridconsumption}}"
  modifier: !input AllowedFeedIn
  modifier_setpoint: "{% if gridsum < 0 -%}{{modifier}}
    {% else -%}
    {{ [((pvchannel1generation - pvchannel2generation) | abs), gridsum] | min * 2 | round }}
    {%- endif %}"
  inverteronline: !input InverterOnlineStatus
  new_setpoint: "
    {% if gridmaxpoint > 0 and gridsum >= gridmaxpoint -%}
    {% set setpoint = upperlimit %}
    {% elif ctlr_mode == 1 -%}
    {% set setpoint = gridsum + modifier_setpoint|float(0) + states(currentlimit)|float(0)
    -5 %}{% if setpoint > upperlimit -%}{% set setpoint = upperlimit %}{% elif setpoint
    < lowerlimit %}{% set setpoint = lowerlimit %}{%- endif %}
    {% elif ctlr_mode == 2 -%}
    {% set setpoint = gridsum + modifier_setpoint|float(0) + pvgeneration
    + 5 %}{% if setpoint > upperlimit -%}{% set setpoint = upperlimit %}{% elif setpoint
    < lowerlimit %}{% set setpoint = lowerlimit %}{%- endif %}
    {%- endif %}
    {{setpoint | round(0) }}"
trigger:
  - platform: state
    entity_id: !input GridPowerMeters
condition:
  - condition: template
    value_template: '{{ states(inverteronline) == "on"}}'
  - condition: template
    value_template: |
      {%- set last = state_attr(this.entity_id, 'last_triggered') %}
      {{ last is none or (last is not none and (now() - last) > timedelta(seconds=triggerinterval)) }}
  - condition: template
    value_template: "{{(new_setpoint - states(currentlimit)|float(0))|abs > 5}}"
action:
  - service: logbook.log
    data_template:
      name: "PVSetpoint:"
      message:
        "Gridsum: {{gridsum}} W & PVGeneration: {{pvgeneration}} W -> new_setpoint:
        {{new_setpoint}} W"
  - service: number.set_value
    target:
      entity_id: !input NonPersistantLimit
    data:
      value: "{{new_setpoint | round(0)}}"
mode: single
